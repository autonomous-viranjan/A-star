Pseudo code: https://isaaccomputerscience.org/concepts/dsa_search_a_star?examBoard=all&stage=all

Declare the visited list
Declare the unvisited list

For each node in graph:
    Add the node to the unvisited list with a g-score of infinity, an f-score of infinity and previous node of null
    
Set the start node's g-score to 0 in the unvisited list
Set the start node's f-score to its h-score in the unvisited list

While the unvisited list is not empty:
    Set current node to the node in the unvisited list with the lowest f-score 
    If the current node is the target node:
        End the while loop
        Copy the values for the current node from the unvisited list to the visited list
    
    Else:   
        For each neighbour of current node:
            If neighbour node is not in the visited list:
                Calculate new g-score = weight of edge + g-score of current node
                If new g-score is less than neighbour's g-score in unvisited list:
                    Update the neighbour's g-score with the new g-score
                    Update the neighbour's f-score to new g-score + h_score
                    Update the neighbour's previous node to the current node
        Copy the values for the current node from the unvisited list to the visited list
        Remove the current node from the unvisited list
        
Return the visited list